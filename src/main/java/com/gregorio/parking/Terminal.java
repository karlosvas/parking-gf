package com.gregorio.parking;

import java.awt.AlphaComposite;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Map;

import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.util.HashMap;

import javax.swing.ImageIcon;
import javax.swing.JPanel;

/**
 *
 * @author rosel
 */
public class Terminal extends javax.swing.JFrame {

    private static final Integer[][] parking=new Integer[3][20];
    private JTable tabla; //Control para mostrar la mastriz de enteros 
    private DefaultTableModel modeloTabla; //Contenedor de la matriz de enteros 
    private JTable tablaTicket; //Control para mostrar la mastriz de enteros 
    private DefaultTableModel modeloTablaTicket; //Contenedor de la matriz de enteros 

    public Maquina maquina;

    /**
     * Creates new form Terminal2
     */
    public Terminal(Maquina maquina) {
        // Atributos
        this.maquina = maquina;

        // Fondo global
        FondoPanel fondo = new FondoPanel("/background.jpg");
        this.setContentPane(fondo);

        // Inicio de componentes
        initComponents();
        // Fondo de ticket
        FondoPanel fondoTiket = new FondoPanel("/papel3.jpg");
        this.scroll_ticket.setViewportView(fondoTiket);
        // Fondo carretera
        // Fondo de monitor


        // Lo centramos
        setLocationRelativeTo(null);
        setTitle("Parking Terminal");
        // Para inicializar con 0 (en vez de null), necesitas hacerlo manualmente
        for (int i = 0; i < parking.length; i++) {
            for (int j = 0; j < parking[i].length; j++) {
                parking[i][j] = 0;
                
            }
        }
        
        mostrarParking();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        monitor = new javax.swing.JPanel();
        generaticket = new javax.swing.JButton();
        retirarvehiculo = new javax.swing.JButton();
        text_matricula = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        text_id = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        text_billete = new javax.swing.JTextField();
        pagar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        scroll_ticket = new javax.swing.JScrollPane();
        parking_esquema = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        monitor.setBorder(javax.swing.BorderFactory.createTitledBorder("Parking"));

        generaticket.setText("Generar Ticket");
        generaticket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generaticketActionPerformed(evt);
            }
        });

        retirarvehiculo.setText("Retirar Vehiculo");
        retirarvehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retirarvehiculoActionPerformed(evt);
            }
        });

        text_matricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_matriculaActionPerformed(evt);
            }
        });

        jLabel1.setText("Matricula:");

        text_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_idActionPerformed(evt);
            }
        });

        jLabel2.setText("ID:");

        jLabel3.setText("Dinero:");

        pagar.setText("Pagar");
        pagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout monitorLayout = new javax.swing.GroupLayout(monitor);
        monitor.setLayout(monitorLayout);
        monitorLayout.setHorizontalGroup(
            monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, monitorLayout.createSequentialGroup()
                .addComponent(retirarvehiculo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addGap(55, 55, 55))
            .addGroup(monitorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generaticket)
                    .addComponent(pagar)
                    .addGroup(monitorLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(text_matricula, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(text_id, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(text_billete))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        monitorLayout.setVerticalGroup(
            monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monitorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generaticket)
                .addGap(4, 4, 4)
                .addGroup(monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_matricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(pagar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_billete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(14, 14, 14)
                .addComponent(retirarvehiculo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        parking_esquema.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parking_esquema)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(monitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(scroll_ticket, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(scroll_ticket, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(monitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(parking_esquema, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(220, 220, 220))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generaticketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generaticketActionPerformed
        Ubicacion u=new Ubicacion(0,0);
        int id = 0;

        boolean encontrado=false;
        for (int y = 0; y < parking.length; y++) {
             
            for (int x = 0; x < parking[y].length; x++) {
                
                if (parking[y][x] == 0 && encontrado==false) {
                    u=new Ubicacion(y,x);
                    id = parking[y][x] = this.generarIdParking(x, y);
                    encontrado=true;
                    
                }
            }
        }

        // Este método devuelve el tiket
        Ticket ticketmostrar=maquina.generarTiket(id, this.text_matricula.getText(), LocalDateTime.now(), u);
        mostrarParking();
        mostrarTicket(ticketmostrar);
    }//GEN-LAST:event_generaticketActionPerformed
    
    private int generarIdParking(int x,int y){
       return y*20+x+1; 
    }
    
    private void retirarvehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retirarvehiculoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_retirarvehiculoActionPerformed

    private void text_matriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_matriculaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_matriculaActionPerformed

    private void text_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_idActionPerformed

    private void pagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pagarActionPerformed

    /**
     * @param args the command line arguments
     */
    private void mostrarParking() {
        // Configuramos los títulos de las columnas del JTable
        String[] titulosColumnas = new String[parking[0].length];
        Arrays.fill(titulosColumnas, "");
        
        // Creamos el modelo de datos
        modeloTabla = new DefaultTableModel(parking, titulosColumnas);
        
        // Creamos el JTable con ese modelo
        tabla = new JTable(modeloTabla);
        
        // Ocultamos el encabezado 
        tabla.getTableHeader().setVisible(false);
        tabla.getTableHeader().setPreferredSize(new Dimension(0, 0));
        
        // Hacemos la tabla transparente para que se vea el fondo
        tabla.setOpaque(false);
        tabla.setBackground(new java.awt.Color(0, 0, 0, 0));
        
        // Establecemos el tamaño de celda uniforme para mejor visualización
        tabla.setRowHeight(50);
        tabla.setRowMargin(20);
        
        // Creamos un renderer personalizado para colorear y centrar las celdas
        DefaultTableCellRenderer customRenderer = new DefaultTableCellRenderer() {
            @Override
            public java.awt.Component getTableCellRendererComponent(JTable table, Object value, 
                    boolean isSelected, boolean hasFocus, int row, int column) {
                java.awt.Component cell = super.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, column);
                
                // Si la celda tiene un valor diferente de 0, la pintamos de verde
                if (value != null && !value.equals(0)) {
                    cell.setBackground(new java.awt.Color(144, 238, 144)); // Verde claro
                    cell.setForeground(java.awt.Color.BLACK); // Texto negro
                } else {
                    cell.setBackground(new java.awt.Color(0, 0, 0, 0)); // Transparente
                    cell.setForeground(java.awt.Color.BLACK);
                }
                
                return cell;
            }
        };
        
        // Centramos el texto
        customRenderer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        
        // Aplicamos el renderer a todas las columnas
        for (int i = 0; i < tabla.getColumnCount(); i++) {
            tabla.getColumnModel().getColumn(i).setCellRenderer(customRenderer);
        }

        // Añadimos la tabla al ScrollPane para que se muestre
        parking_esquema.setViewportView(tabla);
        
        // Para hacer como un refresco de la vista
        parking_esquema.revalidate();
        this.repaint();
    }
    
    private void mostrarTicket(Ticket ticket) {
        System.out.println("Ticket: " + ticket);
        Map<String, String> titulosList = new HashMap<>();
        titulosList.put("ID", String.valueOf(ticket.getId()));
        titulosList.put("Matricula", ticket.getMatricula());
        titulosList.put("Ubicación", ticket.getUbicacion().toString());
        // Fechas LocalDate
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        titulosList.put("Fecha Entrada", ticket.getFechaHoraEntrada().format(formatter));
         
        String[] titulos = new String[titulosList.size()];    
        
        int i = 0;
        for (String t : titulosList.keySet())
            titulos[i++] = t;
        
        String[][] contenidoTicket = new String[1][titulosList.size()];
        int index = 0;
        for (String key : titulosList.keySet()) 
            contenidoTicket[0][index++] = titulosList.get(key);
    
        // Creamos el modelo de datos
        modeloTablaTicket = new DefaultTableModel(contenidoTicket, titulos);
    
        // Creamos el JTable con ese modelo
        tablaTicket = new JTable(modeloTablaTicket);
        tablaTicket.getTableHeader().setPreferredSize(new Dimension(50, 35));
        // Center the header text
        ((DefaultTableCellRenderer) tablaTicket.getTableHeader().getDefaultRenderer())
            .setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        
        // Hacemos la tabla transparente para que se vea el fondo
        tablaTicket.setOpaque(false);
        tablaTicket.setBackground(new java.awt.Color(0, 0, 0, 0));
        
        // Creamos un panel transparente que contenga la tabla
        JPanel panelConTabla = new JPanel(new java.awt.BorderLayout());
        panelConTabla.setOpaque(false); // Panel transparente
        panelConTabla.add(tablaTicket.getTableHeader(), java.awt.BorderLayout.NORTH);
        panelConTabla.add(tablaTicket, java.awt.BorderLayout.CENTER);
        
        // Recuperamos el panel de fondo que ya está establecido
        FondoPanel fondoTicket = (FondoPanel) scroll_ticket.getViewport().getView();
        fondoTicket.setLayout(new java.awt.BorderLayout());
        
        // Limpiamos componentes anteriores y añadimos la nueva tabla
        fondoTicket.removeAll();
        fondoTicket.add(panelConTabla, java.awt.BorderLayout.CENTER);
        fondoTicket.revalidate();
        
        // Para hacer como un refresco de la vista
        this.repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generaticket;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel monitor;
    private javax.swing.JButton pagar;
    private javax.swing.JScrollPane parking_esquema;
    private javax.swing.JButton retirarvehiculo;
    private javax.swing.JScrollPane scroll_ticket;
    private javax.swing.JTextField text_billete;
    private javax.swing.JTextField text_id;
    private javax.swing.JTextField text_matricula;
    // End of variables declaration//GEN-END:variables

    class FondoPanel extends JPanel {
        private Image imagen;
        private boolean transparente = false;
        
        public FondoPanel(String imagePath) {
            this(imagePath, false);
        }
        
        public FondoPanel(String imagePath, boolean transparente) {
            try {
                
                this.transparente = transparente;
                java.net.URL url = getClass().getResource(imagePath);
                if(url != null)
                imagen = new ImageIcon(url).getImage();
                else 
                System.err.println("No se pudo cargar la imagen de fondo" + imagePath);
            } catch (Exception e) {
                System.out.println("Error al cargar la imagen de fondo: " + e.toString());
            }
        }
    
        @Override
        public void paint(Graphics g) {
            if (imagen != null) {
                if (transparente) {
                    // Dibuja con transparencia
                    Graphics2D g2d = (Graphics2D) g;
                    AlphaComposite alcom = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.3f); 
                    g2d.setComposite(alcom);
                    g2d.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
                    g2d.setComposite(AlphaComposite.SrcOver);
                } else {
                    // Dibuja normal
                    g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
                }
            }
            setOpaque(false);
            super.paint(g);
        }
    }
}
